# created 120923
# last edited 120923

# py file containing model architectures

# Imports
import torch
import torch.nn as nn

# Define model - copy of what worked on MNIST
class vgg16TorchNet(nn.Module):
    def __init__(self):
        super(vgg16TorchNet, self).__init__()
        self.flatten = nn.Flatten()

        self.conv_layers = nn.Sequential(  # 1, 2, 144, 452
              nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=2),
              nn.ReLU(), #inplace=True
              nn.Dropout(p=0.5),
              nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=2),
              nn.ReLU(), #inplace=True
              nn.Conv2d(in_channels =64, out_channels=64, kernel_size=3),
              nn.ReLU(),
              nn.MaxPool2d(2, 2),
              nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=2),
              nn.ReLU(), #inplace=True
              nn.Conv2d(in_channels =128, out_channels=128, kernel_size=3),
              nn.ReLU(),
              nn.MaxPool2d(2,2),
              nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=2),
              nn.ReLU(), #inplace=True
              nn.Conv2d(in_channels =256, out_channels=256, kernel_size=3),
              nn.ReLU(),
              nn.MaxPool2d(2,2),
              nn.Dropout(p=0.5), # (1x258048 and 16384x100)
          )

        self.linear_1 = nn.Sequential(    #1x16384 and 4096x100)
            nn.Linear(258048, 100),
            nn.ReLU(),
            nn.Linear(100,100),
            nn.ReLU(),
            nn.Dropout(p=0.5),
            nn.Linear(100,11),
            nn.Softmax(),
        )

    def forward(self, x):
      #forward method. opposition to backward pass
      #print(x.shape)
      x= self.conv_layers(x)
      x = x.flatten()
      x = x.squeeze()
      #print('conv x', x.shape)
      x = self.linear_1(x)
      #print('lin1 x', x)
      return x

# Editable network
def build_net(lin_layer_size, dropout, first_lin_lay):
	class EditNet(nn.Module):
		def __init__(self):
			super(EditNet, self).__init__()
			self.flatten = nn.Flatten()

			self.conv_layers = nn.Sequential(
				nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=2),
				nn.ReLU(),
				nn.Dropout(p=dropout),
				nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=2),
				nn.ReLU(), #inplace=True
				nn.Conv2d(in_channels =64, out_channels=64, kernel_size=3),
				nn.ReLU(),
				nn.MaxPool2d(2, 2),
				nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=2),
				nn.ReLU(), #inplace=True
				nn.Conv2d(in_channels =128, out_channels=128, kernel_size=3),
				nn.ReLU(),
				nn.MaxPool2d(2,2),
				nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=2),
				nn.ReLU(), #inplace=True
				nn.Conv2d(in_channels =256, out_channels=256, kernel_size=3),
				nn.ReLU(),
				nn.MaxPool2d(2,2),
				nn.Dropout(p=dropout), # (1x258048 and 16384x100)
			)

			self.linear_1 = nn.Sequential(    #1x16384 and 4096x100)
				nn.Linear(first_lin_lay, lin_layer_size),
				nn.ReLU(),
				nn.Linear(lin_layer_size,lin_layer_size),
				nn.ReLU(),
				nn.Dropout(p=dropout),
				nn.Linear(lin_layer_size,11),
				nn.Softmax(),
			)

		def forward(self, x):
			x= self.conv_layers(x)
			x = x.flatten()
			x = x.squeeze()
			x = self.linear_1(x)
			return x
	model = EditNet()
	return model



